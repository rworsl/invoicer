version: '3.8'

services:
  # Main application
  web:
    build: .
    container_name: invoice_generator
    ports:
      - "5000:5000"
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=postgresql://invoice_user:secure_password@db:5432/invoice_db
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-here}
    volumes:
      - ./data:/app/data
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    depends_on:
      - db
      - redis
    restart: unless-stopped
    networks:
      - invoice_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL database
  db:
    image: postgres:15-alpine
    container_name: invoice_db
    environment:
      - POSTGRES_DB=invoice_db
      - POSTGRES_USER=invoice_user
      - POSTGRES_PASSWORD=secure_password
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - invoice_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U invoice_user -d invoice_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching and rate limiting
  redis:
    image: redis:7-alpine
    container_name: invoice_redis
    command: redis-server --appendonly yes --requirepass secure_redis_password
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    networks:
      - invoice_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: invoice_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./static:/var/www/static:ro
    depends_on:
      - web
    restart: unless-stopped
    networks:
      - invoice_network

  # Backup service
  backup:
    image: postgres:15-alpine
    container_name: invoice_backup
    environment:
      - POSTGRES_DB=invoice_db
      - POSTGRES_USER=invoice_user
      - POSTGRES_PASSWORD=secure_password
      - POSTGRES_HOST=db
    volumes:
      - ./backups:/backups
      - ./scripts:/scripts:ro
    depends_on:
      - db
    restart: "no"
    networks:
      - invoice_network
    command: >
      sh -c "
        echo 'Setting up backup cron job...'
        echo '0 2 * * * /scripts/backup.sh' | crontab -
        echo 'Backup service ready'
        crond -f
      "

  # Monitoring (optional)
  monitoring:
    image: prom/prometheus:latest
    container_name: invoice_monitoring
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - invoice_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local

networks:
  invoice_network:
    driver: bridge